import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
import os
import time
import shutil
import sys
from datetime import datetime
import warnings
import context
import cst_python_api as cpa
import win32com.client
from win32com.client import gencache
import logging
import pickle
import json

# Set up logging
log_dir = os.path.join(os.getcwd(), "logfiles")
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, f"optimization_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")

class Logger:
    def __init__(self, filename):
        self.terminal = sys.stdout
        self.log = open(filename, "a", encoding="utf-8")

    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)

    def flush(self):
        self.terminal.flush()
        self.log.flush()

sys.stdout = Logger(log_file)
sys.stderr = Logger(log_file)
print(f"=== Optimization started at {datetime.now()} ===")

# Global variables for storing results
results_storage = {
    'below_threshold': [],
    'good_solutions': [],
    'best_solution': None,
    'all_iterations': []
}

# Global list to store all particles data
all_particles_data = []

# --- MODIFICATION: Updated input parameters for 6x6 grid over 6mm x 6mm area ---
inputparameters = [
    28,              # center frequency (GHz)
    10,              # bandwidth (GHz)
    6,               # dimension of unit cell (mm) - MODIFIED
    0.8,             # substrate thickness (mm)
    6,               # number of pixels (npix) - MODIFIED
    0.0000000001,    # target mean squared error (MSE)
    0                # substrate type index
]

class TPSOConfig:
    """Configuration class for PSO parameters"""
    def __init__(self):
        # PSO parameters
        self.n_particles = 100
        self.max_iterations = 20
        self.w_initial = 1.1
        self.w_final = 0.1
        self.c1 = 2
        self.c2 = 2
        self.v_max = 6.0
        self.v_min = -6.0
        self.mse_threshold = inputparameters[5]

    def get_inertia_weight(self, iteration):
        """Calculate inertia weight with linear decrease"""
        return self.w_initial - (self.w_initial - self.w_final) * (iteration / self.max_iterations)

def clear_com_cache():
    """Clears the gen_py cache for win32com to prevent stale object references."""
    try:
        temp_gen_py = os.path.join(os.environ.get('LOCALAPPDATA', ''), 'Temp', 'gen_py')
        if os.path.exists(temp_gen_py):
            print("Clearing COM object cache...")
            shutil.rmtree(temp_gen_py, ignore_errors=True)
        # Re-ensure dispatch to refresh cache
        gencache.EnsureDispatch('CSTStudio.Application')
        print("COM cache refreshed successfully")
    except Exception as e:
        print(f"COM cache cleanup warning: {str(e)}")

def coth(x):
    """Computes the hyperbolic cotangent."""
    return np.cosh(x) / np.sinh(x)

def calculate_s21_te(freq_array):
    """
    Calculate S21 TE response using a theoretical filter model.
    This serves as the target response for the optimization.
    """
    f0 = 28e9
    FBW = 0.01
    BW = f0 * FBW
    f = freq_array * 1e9
    N = 1
    Lr_dB = -30
    Lar = -10 * np.log10(1 - 10**(0.1 * Lr_dB))
    g = np.zeros(N + 2)
    beta = np.log(coth(Lar / 17.37))
    gamma = np.sinh(beta / (2 * N))
    g[0] = 1
    g[1] = 2 * np.sin(np.pi / (2 * N)) / gamma
    for i in range(2, N + 1):
        numerator = 4 * np.sin((2 * i - 1) * np.pi / (2 * N)) * np.sin((2 * i - 3) * np.pi / (2 * N))
        denominator = gamma**2 + (np.sin((i - 1) * np.pi / N))**2
        g[i] = (1 / g[i - 1]) * (numerator / denominator)
    if N % 2 == 0:
        g[N + 1] = (coth(beta / 4))**2
    else:
        g[N + 1] = 1
    R = np.zeros((N + 2, N + 2))
    R[0, 1] = 1 / np.sqrt(g[0] * g[1])
    R[N, N + 1] = 1 / np.sqrt(g[N] * g[N + 1])
    for i in range(1, N):
        R[i, i + 1] = 1 / np.sqrt(g[i] * g[i + 1])
    R1 = R.T
    M_coupling = R1 + R
    Qe1 = f0 / (BW * R[0, 1])
    Qen = f0 / (BW * R[N, N + 1])
    U = np.eye(M_coupling.shape[0])
    U[0, 0] = 0
    U[-1, -1] = 0
    R_matrix = np.zeros_like(M_coupling)
    R_matrix[0, 0] = 1
    R_matrix[-1, -1] = 1
    S21 = np.zeros_like(f, dtype=complex)
    for i in range(len(f)):
        lam = (f0 / BW) * ((f[i] / f0) - (f0 / f[i]))
        A = lam * U - 1j * R_matrix + M_coupling
        A_inv = np.linalg.inv(A)
        S21[i] = -2j * A_inv[-1, 0]
    return np.abs(S21), f

def generate_1_8th_shape_odd(m):
    if m % 2 == 0:
        raise ValueError("Matrix size must be odd.")
    c = m // 2
    shape = np.zeros((m, m), dtype=int)
    for i in range(c + 1):
        for j in range(i, c + 1):
            shape[i, j] = np.random.randint(0, 4)
    return shape

def mirror_8_fold_odd(base):
    m = base.shape[0]
    c = m // 2
    matrix = np.zeros_like(base)
    for i in range(c + 1):
        for j in range(i, c + 1):
            val = base[i, j]
            coords = [
                (i, j), (j, i),
                (i, m - 1 - j), (j, m - 1 - i),
                (m - 1 - i, j), (m - 1 - j, i),
                (m - 1 - i, m - 1 - j), (m - 1 - j, m - 1 - i)
            ]
            for x, y in coords:
                matrix[x, y] = val
    return matrix

def generate_1_8th_shape_even(m):
    if m % 2 != 0:
        raise ValueError("Matrix size must be even.")
    shape = np.zeros((m, m), dtype=int)
    half = m // 2
    for i in range(half):
        for j in range(i + 1):
            shape[i, j] = np.random.randint(0, 4)
    return shape

def mirror_8_fold_even(base):
    m = base.shape[0]
    half = m // 2
    matrix = np.zeros_like(base)
    for i in range(half):
        for j in range(i + 1):
            val = base[i, j]
            matrix[i, j] = val
            matrix[j, i] = val
            matrix[i, m - 1 - j] = val
            matrix[j, m - 1 - i] = val
            matrix[m - 1 - i, j] = val
            matrix[m - 1 - j, i] = val
            matrix[m - 1 - i, m - 1 - j] = val
            matrix[m - 1 - j, m - 1 - i] = val
    return matrix

def generate_symmetric_pattern(n):
    """Generates a full, 8-fold symmetric pattern matrix."""
    if n % 2 == 1:
        shape_1_8 = generate_1_8th_shape_odd(n)
        full_shape = mirror_8_fold_odd(shape_1_8)
    else:
        shape_1_8 = generate_1_8th_shape_even(n)
        full_shape = mirror_8_fold_even(shape_1_8)
    return full_shape

def calculate_pcr(matrix, inputparameters):
    """
    Runs a CST simulation with a robust method for creating slotted geometries.
    This version correctly handles cases with 0, 1, or many patches/slots.
    The geometry is built on a 6x6 grid over a 6mm x 6mm area,
    ensuring each patch is confined to a 1mm x 1mm cell.
    """
    clear_com_cache()
    print("\nRunning CST simulation for new 4-state particle...")

    frequency = float(inputparameters[0])
    bandwidth = float(inputparameters[1])
    unitcellsize = float(inputparameters[2]) # This is 6 mm
    substrateThickness = float(inputparameters[3])
    nPix = int(inputparameters[4]) # This is 6 pixels

    te = np.array([0])
    freq = np.array([frequency])
    S = np.zeros((1, 4))

    # This linspace call creates grid lines at 0, 1, 2, 3, 4, 5, 6 mm
    x, y = np.meshgrid(np.linspace(0, unitcellsize, nPix + 1),
                       np.linspace(0, unitcellsize, nPix + 1))
    y = np.flipud(y)

    myCST = None
    try:
        projectName = "filtermetasurface_4state"
        myCST = cpa.CST_MicrowaveStudio(context.dataFolder, projectName + ".cst")
        myCST.Solver.defineFloquetModes(nModes=2, theta=0.0, phi=0.0)
        myCST.Build.Material.addNormalMaterial("FR4 (Lossy)", 4.3, 1.0, colour=[0.94, 0.82, 0.76], tanD=0.025)
        myCST.Solver.setBoundaryCondition(
            xMin="unit cell", xMax="unit cell",
            yMin="unit cell", yMax="unit cell",
            zMin="expanded open", zMax="expanded open"
        )
        myCST.Build.Shape.addBrick(
            xMin=0.0, xMax=unitcellsize,
            yMin=0.0, yMax=unitcellsize,
            zMin=0.0, zMax=substrateThickness,
            name="Substrate", component="component1", material="FR4 (Lossy)"
        )

        metal_thickness = 0.0
        Zblock = [substrateThickness, substrateThickness + metal_thickness]

        positive_patches = []
        negative_slots = []

        for i1 in range(nPix):
            for j1 in range(nPix):
                patch_val = matrix[i1, j1]
                if patch_val == 0:
                    continue

                # Xblock and Yblock will define a 1mm x 1mm area
                Xblock = [x[i1, j1], x[i1, j1 + 1]]
                Yblock = [y[i1 + 1, j1], y[i1, j1]]
               
                patch_name = f"Patch_{i1}_{j1}"
                myCST.Build.Shape.addBrick(
                    xMin=float(Xblock[0]), xMax=float(Xblock[1]),
                    yMin=float(Yblock[0]), yMax=float(Yblock[1]),
                    zMin=float(Zblock[0]), zMax=float(Zblock[1]),
                    name=patch_name, component="component1", material="PEC"
                )
                positive_patches.append(f"component1:{patch_name}")

                if patch_val > 1:
                    slot_size = 0.25 if patch_val == 2 else 0.5
                   
                    center_x = (Xblock[0] + Xblock[1]) / 2
                    center_y = (Yblock[0] + Yblock[1]) / 2
                    slot_name = f"Slot_{i1}_{j1}"
                    myCST.Build.Shape.addBrick(
                        xMin=center_x - slot_size / 2, xMax=center_x + slot_size / 2,
                        yMin=center_y - slot_size / 2, yMax=center_y + slot_size / 2,
                        zMin=float(Zblock[0]), zMax=float(Zblock[1]),
                        name=slot_name, component="component1", material="PEC"
                    )
                    negative_slots.append(f"component1:{slot_name}")
       
        # Unite positive patches one by one.
        if len(positive_patches) > 1:
            for i in range(1, len(positive_patches)):
                myCST.Build.Boolean.add(positive_patches[0], positive_patches[i])

        # Unite negative slots one by one.
        if len(negative_slots) > 1:
            for i in range(1, len(negative_slots)):
                myCST.Build.Boolean.add(negative_slots[0], negative_slots[i])
           
        # Subtract the final united slot object from the final united patch object.
        if positive_patches and negative_slots:
            myCST.Build.Boolean.subtract(positive_patches[0], negative_slots[0])

        save_path = r"C:/Users/User/Documents/saved_cst_projects2/"
        save_file_name = "filtermetasurface_4state_final.cst"
        if not os.path.exists(save_path):
            os.makedirs(save_path)

        myCST.Solver.setFrequencyRange(frequency - bandwidth / 2, frequency + bandwidth / 2)
        myCST.Solver.changeSolverType("HF Frequency Domain")
        myCST.saveFile(save_path, save_file_name)
        myCST.Solver.SetNumberOfResultDataSamples(501)

        print("Running solver...")
        myCST.Solver.runSimulation()
       
        freq, SZMax1ZMax1 = myCST.Results.getSParameters(0, 0, 1, 1)
        _, SZMax2ZMax1 = myCST.Results.getSParameters(0, 0, 2, 1)
        _, SZMin1ZMax1 = myCST.Results.getSParameters(-1, 0, 1, 1)
        _, SZMin2ZMax1 = myCST.Results.getSParameters(-1, 0, 2, 1)
       
        denominator = (abs(SZMin1ZMax1))**2 + (abs(SZMax1ZMax1))**2
        if denominator.any() == 0:
            te = np.zeros_like(denominator)
        else:
            te = ((abs(SZMin1ZMax1))**2) / denominator
           
        S = np.column_stack((SZMax1ZMax1, SZMax2ZMax1, SZMin1ZMax1, SZMin2ZMax1))

        print("Simulation completed successfully")
        return te, freq, S

    except Exception as e:
        print(f"Error in CST simulation: {str(e)}")
        return np.array([0]), np.array([frequency]), np.zeros((1, 4))
    finally:
        if myCST is not None:
            try:
                myCST.closeFile()
                print("CST file closed")
            except Exception as e:
                print(f"Warning: Could not close CST file: {str(e)}")
        clear_com_cache()

class PSO_Cost_Function:
    """Cost function class with context for particle storage."""
    def __init__(self, inputparameters, config):  # Added config parameter
        self.inputparameters = inputparameters
        self.current_iteration = None
        self.particle_index = None
        self.config = config  # Store the config

    def set_context(self, iteration, particle_index):
        """Set context for current particle evaluation."""
        self.current_iteration = iteration
        self.particle_index = particle_index

    def __call__(self, x_vector):
        global all_particles_data, results_storage

        nPix = self.inputparameters[4]
        mse_threshold = self.inputparameters[5]
        good_threshold = 2e-11

        try:
            if nPix % 2 == 1:
                c = nPix // 2
                base_pattern = np.zeros((nPix, nPix), dtype=int)
                idx = 0
                for i in range(c + 1):
                    for j in range(i, c + 1):
                        base_pattern[i, j] = x_vector[idx]
                        idx += 1
                full_matrix = mirror_8_fold_odd(base_pattern)
            else:
                half = nPix // 2
                base_pattern = np.zeros((nPix, nPix), dtype=int)
                idx = 0
                for i in range(half):
                    for j in range(i + 1):
                        base_pattern[i, j] = x_vector[idx]
                        idx += 1
                full_matrix = mirror_8_fold_even(base_pattern)

            te, freq, S = calculate_pcr(full_matrix, self.inputparameters)

            if len(freq) <= 1:
                mse = np.inf
            else:
                target_y, _ = calculate_s21_te(freq)
                mse = np.mean((te - target_y) ** 2)

            particle_data = {
                'iteration': self.current_iteration,
                'particle_index': self.particle_index,
                'position_vector': x_vector.tolist(),
                'full_matrix': full_matrix.tolist(),
                'fitness': mse,
                'te_response': te.tolist(),
                's_parameters_real': np.real(S).tolist(),
                's_parameters_imag': np.imag(S).tolist(),
                'freq_array': freq.tolist()
            }
            all_particles_data.append(particle_data)

            # Create results directory path
            results_dir = r"E:\GOPAL_TPSO\TPSO_Results"
            shape_name = f"{nPix}x{nPix}_grid"
            iteration_dir = os.path.join(results_dir, shape_name, f"iteration_{self.current_iteration}")
            os.makedirs(iteration_dir, exist_ok=True)

            # Save this particle's data temporarily (will be cleaned up later)
            temp_dir = os.path.join(iteration_dir, "temp")
            os.makedirs(temp_dir, exist_ok=True)
            save_solution(full_matrix, mse, self.inputparameters, f"particle_{self.particle_index}", temp_dir)
            plot_solution(full_matrix, te, freq, mse, temp_dir, target_y)

            if mse <= mse_threshold:
                results_storage['below_threshold'].append({'matrix': full_matrix, 'mse': mse})
            elif mse <= good_threshold:
                results_storage['good_solutions'].append({'matrix': full_matrix, 'mse': mse})

            # After all particles in this iteration are evaluated, save top 5
            if self.particle_index == self.config.n_particles - 1:
                self._save_top5_for_iteration(iteration_dir, nPix, temp_dir)

            print(f"Current MSE: {mse:.12f}")
            return mse
        except Exception as e:
            print(f"Cost function error: {str(e)}")
            return np.inf

    def _save_top5_for_iteration(self, iteration_dir, nPix, temp_dir):
        """Saves only the top 5 best particles for the current iteration."""
        # Get all particles from this iteration
        current_iter_particles = [
            p for p in all_particles_data 
            if p['iteration'] == self.current_iteration and p['fitness'] != np.inf
        ]
        
        # Sort by fitness (MSE)
        sorted_particles = sorted(current_iter_particles, key=lambda x: x['fitness'])
        
        # Clean up the iteration directory (remove temp files)
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
        
        # Save the parameters file
        with open(os.path.join(iteration_dir, "parameters.txt"), 'w') as f:
            f.write(f"Iteration: {self.current_iteration}\n")
            f.write(f"Number of particles: {self.config.n_particles}\n")
            f.write(f"Grid size: {nPix}x{nPix}\n")
            f.write(f"Best MSE this iteration: {sorted_particles[0]['fitness']:.12f}\n")
            f.write("\nTop 5 Solutions:\n")
            for i, p in enumerate(sorted_particles[:5]):
                f.write(f"{i+1}. MSE: {p['fitness']:.12f}\n")
        
        # Save top 5 plots only
        for i, particle in enumerate(sorted_particles[:5]):
            rank = i + 1
            
            # Reconstruct matrix
            if nPix % 2 == 1:
                c = nPix // 2
                base_pattern = np.zeros((nPix, nPix), dtype=int)
                idx = 0
                for i in range(c + 1):
                    for j in range(i, c + 1):
                        base_pattern[i, j] = particle['position_vector'][idx]
                        idx += 1
                full_matrix = mirror_8_fold_odd(base_pattern)
            else:
                half = nPix // 2
                base_pattern = np.zeros((nPix, nPix), dtype=int)
                idx = 0
                for i in range(half):
                    for j in range(i + 1):
                        base_pattern[i, j] = particle['position_vector'][idx]
                        idx += 1
                full_matrix = mirror_8_fold_even(base_pattern)
            
            # Generate and save plot
            target_y = None
            if len(particle['freq_array']) > 1:
                target_y, _ = calculate_s21_te(np.array(particle['freq_array']))
            
            plt.figure(figsize=(12, 5))
            
            # Pixel configuration plot
            plt.subplot(121)
            cmap = ListedColormap(['white', 'cornflowerblue', 'salmon', 'lightgreen'])
            plt.imshow(full_matrix, cmap=cmap, interpolation='none', vmin=0, vmax=3)
            plt.gca().set_xticks(np.arange(-0.5, full_matrix.shape[1], 1), minor=True)
            plt.gca().set_yticks(np.arange(-0.5, full_matrix.shape[0], 1), minor=True)
            plt.grid(which='minor', color='black', linestyle='-', linewidth=1)
            plt.xticks([])
            plt.yticks([])
            plt.title(f"Pixel Configuration (Rank {rank})")
            cbar = plt.colorbar(ticks=[0, 1, 2, 3])
            cbar.set_ticklabels(['Empty', 'Full Patch', '0.25mm Slot', '0.5mm Slot'])
            
            # TE Response plot
            plt.subplot(122)
            if len(particle['freq_array']) > 1:
                plt.plot(particle['freq_array'], particle['te_response'], 'b-', label='Optimized TE')
                if target_y is not None:
                    plt.plot(particle['freq_array'], target_y, 'r--', label='Target TE')
            plt.xlabel('Frequency (GHz)')
            plt.ylabel('Transmission Efficiency')
            plt.title(f'TE Response (MSE: {particle["fitness"]:.4e})')
            plt.legend()
            plt.grid(True)
            plt.ylim(0, 1.1)
            
            plt.tight_layout()
            plt.savefig(os.path.join(iteration_dir, f"top_{rank}_solution.png"), dpi=300)
            plt.close()

def plot_solution(matrix, te, freq, mse, save_dir=None, target_y=None):
    """Plot and save solution visualization with 4 states."""
    plt.figure(figsize=(15, 6))

    # Pixel configuration plot
    plt.subplot(131)
    cmap = ListedColormap(['white', 'cornflowerblue', 'salmon', 'lightgreen'])
    plt.imshow(matrix, cmap=cmap, interpolation='none', vmin=0, vmax=3)
    plt.gca().set_xticks(np.arange(-0.5, matrix.shape[1], 1), minor=True)
    plt.gca().set_yticks(np.arange(-0.5, matrix.shape[0], 1), minor=True)
    plt.grid(which='minor', color='black', linestyle='-', linewidth=1)
    plt.xticks([])
    plt.yticks([])
    plt.title(f"Pixel Configuration\n(0=White, 1=Blue, 2=Red, 3=Yellow)")
    cbar = plt.colorbar(ticks=[0, 1, 2, 3])
    cbar.set_ticklabels(['Empty', 'Full Patch', '0.25mm Slot', '0.5mm Slot'])

    # TE Response plot
    plt.subplot(132)
    if len(freq) > 1:
        if target_y is None:
            target_y, _ = calculate_s21_te(freq)
        plt.plot(freq, te, 'b-', label='Optimized TE')
        plt.plot(freq, target_y, 'r--', label='Target TE')
    plt.xlabel('Frequency (GHz)')
    plt.ylabel('Transmission Efficiency')
    plt.title('TE Response Comparison')
    plt.legend()
    plt.grid(True)
    plt.ylim(0, 1.1)

    # MSE plot
    plt.subplot(133)
    if len(freq) > 1:
        mse_values = (te - target_y) ** 2
        plt.plot(freq, mse_values, 'g-', label='MSE per frequency')
        plt.axhline(y=np.mean(mse_values), color='purple', linestyle='--', label=f'Mean MSE: {mse:.2e}')
    plt.xlabel('Frequency (GHz)')
    plt.ylabel('MSE')
    plt.title('Mean Squared Error')
    plt.legend()
    plt.grid(True)
    plt.yscale('log')

    plt.suptitle(f"Optimization Results (MSE: {mse:.4e})")
    plt.tight_layout()

    if save_dir:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        plt.savefig(os.path.join(save_dir, f"solution_plot_{timestamp}.png"), dpi=300)
    plt.close()

def save_solution(matrix, mse, inputparameters, solution_type="best", base_dir=None):
    """Saves the solution matrix and parameters to a timestamped directory."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Determine the save directory
    if base_dir is None:
        base_dir = r"C:\Users\User\Desktop\TPSO_Results"
        nPix = inputparameters[4]
        shape_name = f"{nPix}x{nPix}_grid"
        save_dir = os.path.join(base_dir, shape_name, f"{solution_type}_{timestamp}")
    else:
        save_dir = base_dir
    
    os.makedirs(save_dir, exist_ok=True)
    
    # Save matrix as numpy file
    np.save(os.path.join(save_dir, f"{solution_type}_matrix.npy"), matrix)
    
    # Save parameters and configuration to text file
    with open(os.path.join(save_dir, f"{solution_type}_parameters.txt"), 'w') as f:
        f.write(f"Solution Type: {solution_type}\n")
        f.write(f"Timestamp: {timestamp}\n")
        f.write(f"MSE: {mse:.12f}\n")
        f.write(f"Frequency: {inputparameters[0]} GHz\n")
        f.write(f"Bandwidth: {inputparameters[1]} GHz\n")
        f.write(f"Unit Cell Size: {inputparameters[2]} mm\n")
        f.write(f"Substrate Thickness: {inputparameters[3]} mm\n")
        f.write(f"Grid Size: {inputparameters[4]}x{inputparameters[4]}\n")
        f.write(f"Substrate Type: {'FR4 (Lossy)' if inputparameters[6] == 0 else 'Other'}\n\n")
        
        f.write("Pixel Configuration:\n")
        for row in matrix:
            f.write(" ".join(map(str, row)) + "\n")
    
    return save_dir

class ConfigurablePSO:
    """
    A Particle Swarm Optimizer modified to handle 4 discrete states using phasors.
    """
    def __init__(self, fun: callable, nvars: int, config: TPSOConfig):
        self.fun = fun
        self.nvars = nvars
        self.config = config
       
        self.state_phasors = np.array([
            np.exp(1j * np.deg2rad(45)),
            np.exp(1j * np.deg2rad(135)),
            np.exp(1j * np.deg2rad(-45)),
            np.exp(1j * np.deg2rad(-135))
        ])
        self.num_states = 4
       
        self.tracking = {
            'iteration': [], 'global_best': [], 'mean_fitness': [],
            'diversity': [],
        }
        self._initialize_swarm()

    def _phasor_to_int(self, phasor_vector):
        """Maps a vector of phasors to the closest integer state {0, 1, 2, 3}."""
        angles = np.angle(phasor_vector)
        int_vector = np.argmin(np.abs(angles[:, np.newaxis] - np.angle(self.state_phasors)), axis=1)
        mapping = {0: 1, 1: 2, 2: 3, 3: 0}
        return np.array([mapping[i] for i in int_vector])

    def _calculate_diversity(self):
        """Calculates swarm diversity based on the standard deviation of particle positions."""
        if len(self.positions) <= 1: return 0.0
        angles = np.angle(self.positions)
        return np.mean(np.std(angles, axis=0))

    def _initialize_swarm(self):
        """Initializes the swarm with random positions and zero velocities."""
        n_particles = self.config.n_particles
        random_indices = np.random.randint(0, self.num_states, size=(n_particles, self.nvars))
        self.positions = self.state_phasors[random_indices]
        self.velocities = np.zeros((n_particles, self.nvars), dtype=np.complex128)
       
        self.best_positions = self.positions.copy()
        self.best_fvals = np.full(n_particles, np.inf)
        self.state = {
            'iteration': 0, 'fevals': 0, 'start_time': time.time(),
            'global_best_fval': np.inf, 'global_best_position': None,
            'stall_counter': 0,
        }
        print("\n--- Starting 4-State Phasor PSO ---")
        print("Iter | Best f(x)      | Mean f(x)   | Stall | Diversity")
        print("---------------------------------------------------------")
        self._evaluate_swarm()
        self._store_iteration_data()
        self._display_progress()

    def _evaluate_swarm(self):
        """Evaluates the fitness of each particle in the swarm."""
        self.current_fvals = []
        for i, x_phasor in enumerate(self.positions):
            if hasattr(self.fun, 'set_context'):
                self.fun.set_context(self.state['iteration'], i)
           
            x_int = self._phasor_to_int(x_phasor)
            fitness = self.fun(x_int)
            self.current_fvals.append(fitness)

        self.current_fvals = np.array(self.current_fvals)
        self.state['fevals'] += len(self.positions)
       
        improved_mask = self.current_fvals < self.best_fvals
        self.best_positions[improved_mask] = self.positions[improved_mask]
        self.best_fvals[improved_mask] = self.current_fvals[improved_mask]

        current_best_idx = np.argmin(self.best_fvals)
        if self.best_fvals[current_best_idx] < self.state['global_best_fval']:
            self.state['global_best_fval'] = self.best_fvals[current_best_idx]
            self.state['global_best_position'] = self.best_positions[current_best_idx]
            self.state['stall_counter'] = 0
        else:
            self.state['stall_counter'] += 1

    def _update_swarm(self):
        """Updates particle velocities and positions, ensuring correct normalization."""
        n_particles = self.config.n_particles
        w = self.config.get_inertia_weight(self.state['iteration'])
        c1, c2 = self.config.c1, self.config.c2

        e1 = np.random.rand(n_particles, self.nvars)
        e2 = np.random.rand(n_particles, self.nvars)

        p_best = self.best_positions
        g_best = self.state['global_best_position']
       
        cognitive_term = c1 * e1 * (p_best - self.positions)
        social_term = c2 * e2 * (g_best - self.positions)
        self.velocities = w * self.velocities + cognitive_term + social_term

        vel_abs = np.abs(self.velocities)
        self.velocities[vel_abs > self.config.v_max] = (self.velocities[vel_abs > self.config.v_max] / vel_abs[vel_abs > self.config.v_max]) * self.config.v_max
       
        self.positions += self.velocities
       
        pos_abs = np.abs(self.positions)
        pos_abs[pos_abs == 0] = 1e-9
       
        self.positions /= pos_abs
       
    def optimize(self) -> dict:
        """Main optimization loop."""
        while not self._check_termination():
            self.state['iteration'] += 1
            self._update_swarm()
            self._evaluate_swarm()
            self._store_iteration_data()
            self._display_progress()
       
        if self.state['global_best_position'] is None:
            print("Warning: No valid global best position found during optimization.")
            return self._prepare_results()

        final_best_int = self._phasor_to_int(self.state['global_best_position'])
        results = self._prepare_results()
        results['x'] = final_best_int
        return results

    def _check_termination(self) -> bool:
        """Checks if termination conditions are met."""
        if self.state['global_best_fval'] <= self.config.mse_threshold:
            self.exit_flag, self.exit_message = 3, f"MSE threshold ({self.config.mse_threshold}) reached"
            return True
        if self.state['iteration'] >= self.config.max_iterations:
            self.exit_flag, self.exit_message = 0, "Maximum iterations reached"
            return True
        if self.state['stall_counter'] >= 40:
            self.exit_flag, self.exit_message = 1, "Stall iterations limit reached"
            return True
        return False

    def _display_progress(self):
        """Prints the progress of the optimization."""
        mean_fitness = np.mean(self.current_fvals) if len(self.current_fvals) > 0 else np.inf
        line = (f"{self.state['iteration']:4d} | "
                f"{self.state['global_best_fval']:14.10f} | "
                f"{mean_fitness:11.8f} | "
                f"{self.state['stall_counter']:5d} | "
                f"{self.tracking['diversity'][-1]:.5f}")
        print(line)

    def _prepare_results(self) -> dict:
        """Prepares the final results dictionary."""
        g_best_pos = self.state['global_best_position']
        if g_best_pos is None:
            g_best_pos = np.zeros(self.nvars, dtype=np.complex128)

        return {'x': g_best_pos, 'fun': self.state['global_best_fval'],
                'nit': self.state['iteration'], 'nfev': self.state['fevals'],
                'exit_flag': self.exit_flag, 'message': self.exit_message}

    def _store_iteration_data(self):
        """Stores data for each iteration for later analysis."""
        current_diversity = self._calculate_diversity()
        self.tracking['iteration'].append(self.state['iteration'])
        self.tracking['global_best'].append(self.state['global_best_fval'])
        mean_fitness = np.mean(self.current_fvals) if len(self.current_fvals) > 0 else np.inf
        self.tracking['mean_fitness'].append(mean_fitness)
        self.tracking['diversity'].append(current_diversity)

def save_all_particles_data(all_particles_data, inputparameters, config):
    """Saves all particle data from all iterations into a json file."""
    # Create results directory
    results_dir = r"C:\Users\User\Desktop\TPSO_Results"
    nPix = inputparameters[4]
    shape_name = f"{nPix}x{nPix}_grid"
    folder_path = os.path.join(results_dir, shape_name)
    os.makedirs(folder_path, exist_ok=True)
    
    file_path = os.path.join(folder_path, "all_particles_data.json")
   
    # Convert numpy inf to a string for JSON compatibility
    for particle in all_particles_data:
        if particle['fitness'] == np.inf:
            particle['fitness'] = 'inf'

    with open(file_path, 'w') as f:
        json.dump(all_particles_data, f, indent=4)
    print("\n" + "=" * 50)
    print(f"Saved all particles data to: {os.path.abspath(file_path)}")
    print("=" * 50 + "\n")
    return file_path

def pyoptimize_te(inputparameters):
    """Main function to set up and run the PSO optimization."""
    global results_storage, all_particles_data

    print("\nStarting 4-State PSO optimization...")
    nPix = inputparameters[4]
   
    # Calculate number of variables based on grid size
    if nPix % 2 == 1:
        c = nPix // 2
        nvars = sum(range(c + 2))
    else:
        half = nPix // 2
        nvars = sum(range(half + 1))

    # Initialize configuration and cost function
    config = TPSOConfig()
    pso_cost_fn = PSO_Cost_Function(inputparameters, config)  # Pass config here
    start_time = time.time()
   
    # Run optimization
    optimizer = ConfigurablePSO(fun=pso_cost_fn, nvars=nvars, config=config)
    results = optimizer.optimize()
   
    # Create results directory structure
    results_dir = r"C:\Users\User\Desktop\TPSO_Results"
    shape_name = f"{nPix}x{nPix}_grid"
    os.makedirs(os.path.join(results_dir, shape_name), exist_ok=True)
    
    # Save all particles data
    all_particles_file = os.path.join(results_dir, shape_name, "all_particles_data.json")
    with open(all_particles_file, 'w') as f:
        # Convert numpy inf to string for JSON compatibility
        for particle in all_particles_data:
            if particle['fitness'] == np.inf:
                particle['fitness'] = 'inf'
        json.dump(all_particles_data, f, indent=4)
    
    print("\n" + "=" * 50)
    print(f"Saved all particles data to: {os.path.abspath(all_particles_file)}")
    print("=" * 50 + "\n")

    # Check if optimization produced a valid result
    if 'x' not in results or results['fun'] == np.inf:
        print("\nOptimization did not find a valid solution. Exiting.")
        return results_storage

    # Process optimal solution
    optimal_vector = results['x']
    optimal_mse = results['fun']
   
    # Reconstruct full matrix from optimal vector
    if nPix % 2 == 1:
        c = nPix // 2
        base = np.zeros((nPix, nPix), dtype=int)
        idx = 0
        for i in range(c + 1):
            for j in range(i, c + 1):
                base[i, j] = optimal_vector[idx]
                idx += 1
        optimal_matrix = mirror_8_fold_odd(base)
    else:
        half = nPix // 2
        base = np.zeros((nPix, nPix), dtype=int)
        idx = 0
        for i in range(half):
            for j in range(i + 1):
                base[i, j] = optimal_vector[idx]
                idx += 1
        optimal_matrix = mirror_8_fold_even(base)

    # Save final solution if valid
    if optimal_mse < np.inf:
        print("\n--- Final Best Solution ---")
        final_dir = os.path.join(results_dir, shape_name, "final_solution")
        os.makedirs(final_dir, exist_ok=True)
        
        # Save solution files
        save_solution(optimal_matrix, optimal_mse, inputparameters, "best_final", final_dir)
        
        # Calculate and plot final solution
        te_opt, freq_opt, S_opt = calculate_pcr(optimal_matrix, inputparameters)
        target_y, _ = calculate_s21_te(freq_opt)
        plot_solution(optimal_matrix, te_opt, freq_opt, optimal_mse, final_dir, target_y)
        
        # Store results
        results_storage['best_solution'] = {
            'matrix': optimal_matrix.tolist(), 
            'mse': optimal_mse,
            'te': te_opt.tolist(), 
            'freq': freq_opt.tolist(), 
            'save_dir': final_dir
        }

    # Print optimization summary
    print("\nOptimization results:")
    print(f"Optimal MSE: {optimal_mse:.12f}")
    print(f"Exit condition: {results['message']}")
    print(f"Total function evaluations: {results['nfev']}")
    print(f"Total iterations: {results['nit']}")
    print(f"Total optimization time: {time.time() - start_time:.2f} seconds")
    print("\nSolution summary:")
    print(f"Solutions below MSE threshold: {len(results_storage['below_threshold'])}")
    print(f"Good solutions found: {len(results_storage['good_solutions'])}")

    # Save final summary
    summary_path = os.path.join(results_dir, shape_name, "optimization_summary.json")
    with open(summary_path, 'w') as f:
        json.dump(results_storage, f, indent=4)
    
    print(f"\nSaved optimization summary to: {summary_path}")
       
    return results_storage

if __name__ == "__main__":
    results = pyoptimize_te(inputparameters)
    print("\nOptimization process completed.")
