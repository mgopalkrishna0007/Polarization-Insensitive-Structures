import numpy as np
import matplotlib.pyplot as plt
import os
import shutil
import pandas as pd
from datetime import datetime
import warnings

# Print the location where files will be saved
csv_path = r"C:\Users\IDARE_ECE\Downloads\inference_predictions_8x8_012.csv"
print(f"Reading predictions from: {csv_path}")
print(f"Images will be saved to: {os.path.abspath('pcr_plots')}")

# The following imports are specific to the user's environment for CST integration.
try:
    import context
    import cst_python_api as cpa
    import win32com.client
    from win32com.client import gencache
except ImportError:
    print("Warning: CST-related libraries not found. The 'calculate_pcr' function will not work.")
    # Define dummy modules/classes if they don't exist
    class DummyCST:
        def __getattr__(self, name):
            if name == 'Solver' or name == 'Build' or name == 'Results':
                return self
            def dummy_method(*args, **kwargs):
                print(f"Dummy call to {name} with args: {args}, kwargs: {kwargs}")
                if name == 'getSParameters':
                    freq = np.linspace(75, 83, 501)
                    val = np.random.rand(501) + 1j * np.random.rand(501)
                    return freq, val
                return None
            return dummy_method

    cpa = type('cpa', (), {'CST_MicrowaveStudio': DummyCST})
    context = type('context', (), {'dataFolder': '.'})
    win32com = type('win32com', (), {'client': None})

def clear_com_cache():
    try:
        if gencache.is_generated_dir(gencache.GetGeneratePath()):
            print("Clearing COM cache...")
            shutil.rmtree(gencache.GetGeneratePath())
            print("COM cache cleared successfully.")
    except Exception as e:
        print(f"Info: Could not clear COM cache (this is expected on non-Windows systems): {e}")

def coth(x):
    return np.cosh(x) / np.sinh(x)

def calculate_mse(actual, desired):
    return np.mean((actual - desired)**2)

def calculate_s21_te(freq_array):
    f0 = 79e9  # Center frequency in Hz
    FBW = 0.002  # Fractional bandwidth
    BW = f0 * FBW  # Absolute bandwidth in Hz
    f = freq_array * 1e9  # Convert GHz to Hz

    N = 1  # Filter order
    Lr_dB = -30  # Reflection coefficient in dB
    Lar = -10 * np.log10(1 - 10**(0.1 * Lr_dB))  # Pass band ripple

    g = np.zeros(N + 2)
    beta = np.log(coth(Lar / 17.37))
    gamma = np.sinh(beta / (2 * N))

    g[0] = 1
    g[1] = 2 * np.sin(np.pi / (2 * N)) / gamma

    for i in range(2, N + 1):
        numerator = 4 * np.sin((2 * i - 1) * np.pi / (2 * N)) * np.sin((2 * i - 3) * np.pi / (2 * N))
        denominator = gamma**2 + (np.sin((i - 1) * np.pi / N))**2
        g[i] = (1 / g[i - 1]) * (numerator / denominator)

    g[N + 1] = (coth(beta / 4))**2 if N % 2 == 0 else 1

    R = np.zeros((N + 2, N + 2))
    R[0, 1] = 1 / np.sqrt(g[0] * g[1])
    R[N, N + 1] = 1 / np.sqrt(g[N] * g[N + 1])

    for i in range(1, N):
        R[i, i + 1] = 1 / np.sqrt(g[i] * g[i + 1])

    R1 = R.T
    M_coupling = R1 + R  # Complete coupling matrix

    U = np.eye(M_coupling.shape[0])
    U[0, 0], U[-1, -1] = 0, 0
    R_matrix = np.zeros_like(M_coupling)
    R_matrix[0, 0], R_matrix[-1, -1] = 1, 1
    S21 = np.zeros_like(f, dtype=complex)

    for i in range(len(f)):
        lam = (f0 / BW) * ((f[i] / f0) - (f0 / f[i]))
        A = lam * U - 1j * R_matrix + M_coupling
        A_inv = np.linalg.inv(A)
        S21[i] = -2j * A_inv[-1, 0]

    return np.abs(S21)
    
def calculate_pcr(matrix, inputparameters):
    clear_com_cache()
    print("\nRunning CST simulation...")

    frequency = float(inputparameters[0])
    bandwidth = float(inputparameters[1])
    unitcellsize = float(inputparameters[2])
    substrateThickness = float(inputparameters[3])
    nPix = int(inputparameters[4])
    substrate = inputparameters[6]

    te = np.array([0])
    freq = np.array([frequency])
    S = np.zeros((1, 4))

    x, y = np.meshgrid(np.linspace(0, unitcellsize, nPix + 1),
                       np.linspace(0, unitcellsize, nPix + 1))
    y = np.flipud(y)

    myCST = None
    try:
        projectName = "filtermetasurface"
        myCST = cpa.CST_MicrowaveStudio(context.dataFolder, projectName + ".cst")
        myCST.Solver.defineFloquetModes(nModes=2, theta=0.0, phi=0.0, forcePolar=False, polarAngle=0.0)
        myCST.Solver.setBoundaryCondition(
            xMin="unit cell", xMax="unit cell",
            yMin="unit cell", yMax="unit cell",
            zMin="expanded open", zMax="expanded open"
        )
        myCST.Build.Material.addNormalMaterial("FR4 (Lossy)", 4.3, 1.0, colour=[0.94, 0.82, 0.76], tanD=0.025)
        myCST.Build.Shape.addBrick(
            xMin=0.0, xMax=unitcellsize,
            yMin=0.0, yMax=unitcellsize,
            zMin=0.0, zMax=substrateThickness,
            name="Substrate", component="component1", material="FR4 (Lossy)"
        )

        ii = 0
        Zblock = [substrateThickness, substrateThickness]
        for i1 in range(nPix):
            for j1 in range(nPix):
                if matrix[i1, j1] > 0:
                    ii += 1
                    Xblock = [x[i1, j1], x[i1, j1 + 1]]
                    Yblock = [y[i1 + 1, j1], y[i1, j1]]
                    name = f"Brick{ii}"

                    myCST.Build.Shape.addBrick(
                        xMin=float(Xblock[0]), xMax=float(Xblock[1]),
                        yMin=float(Yblock[0]), yMax=float(Yblock[1]),
                        zMin=float(Zblock[0]), zMax=float(Zblock[1]),
                        name=name, component="component1", material="PEC"
                    )

                    if matrix[i1, j1] == 2:
                        pixel_width = Xblock[1] - Xblock[0]
                        center_x = (Xblock[0] + Xblock[1]) / 2
                        center_y = (Yblock[0] + Yblock[1]) / 2
                        
                        vert_slot_name = f"VertSlot{ii}"
                        myCST.Build.Shape.addBrick(
                            xMin=center_x - pixel_width/8, xMax=center_x + pixel_width/8,
                            yMin=Yblock[0], yMax=Yblock[1],
                            zMin=Zblock[0], zMax=Zblock[1] + 0.1,
                            name=vert_slot_name, component="component1", material="PEC"
                        )
                        
                        horiz_slot_name = f"HorizSlot{ii}"
                        myCST.Build.Shape.addBrick(
                            xMin=Xblock[0], xMax=Xblock[1],
                            yMin=center_y - pixel_width/8, yMax=center_y + pixel_width/8,
                            zMin=Zblock[0], zMax=Zblock[1] + 0.1,
                            name=horiz_slot_name, component="component1", material="PEC"
                        )
                        
                        myCST.Build.Boolean.subtract("component1:" + name, "component1:" + vert_slot_name)
                        myCST.Build.Boolean.subtract("component1:" + name, "component1:" + horiz_slot_name)

        save_path = r"C:/Users/IDARE_ECE/Documents/saved_cst_projects2/"
        save_file_name = "filtermetasurface2.cst"
        if not os.path.exists(save_path):
            os.makedirs(save_path)

        myCST.Solver.setFrequencyRange(frequency - bandwidth / 2, frequency + bandwidth / 2)
        myCST.Solver.changeSolverType("HF Frequency Domain")
        myCST.saveFile(save_path, save_file_name)
        myCST.Solver.SetNumberOfResultDataSamples(501)

        print("Running solver")
        myCST.Solver.runSimulation()
        freq, SZMax1ZMax1 = myCST.Results.getSParameters(0, 0, 1, 1)
        _, SZMax2ZMax1 = myCST.Results.getSParameters(0, 0, 2, 1)
        _, SZMin1ZMax1 = myCST.Results.getSParameters(-1, 0, 1, 1)
        _, SZMin2ZMax1 = myCST.Results.getSParameters(-1, 0, 2, 1)

        denominator = (abs(SZMin1ZMax1))**2 + (abs(SZMax1ZMax1))**2
        te = ((abs(SZMin1ZMax1))**2) / denominator
        S = np.column_stack((SZMax1ZMax1, SZMax2ZMax1, SZMin1ZMax1, SZMin2ZMax1))

        print("Simulation completed successfully")
        return te, freq, S

    except Exception as e:
        print(f"Error in CST simulation: {str(e)}")
        return te, freq, S
    finally:
        if myCST is not None:
            try:
                myCST.closeFile()
                print("CST file closed")
            except Exception as e:
                print(f"Warning: Could not close CST file: {str(e)}")
        clear_com_cache()

if __name__ == "__main__":
    # Input Parameters
    inputparameters = [
        79,    # center frequency (GHz)
        20,    # bandwidth (GHz)
        2,     # dimension of unit cell (mm)
        0.8,   # width of pixel (mm)
        8,     # number of pixels (nPix)
        1e-10, # target mean squared error (MSE)
        0      # substrate type index
    ]
    
    # Read the CSV file with predictions
    try:
        df = pd.read_csv(csv_path)
        print(f"Successfully loaded CSV file with {len(df)} predictions")
    except Exception as e:
        print(f"Error loading CSV file: {str(e)}")
        exit()
    
    # Create output directory
    output_dir = "pcr_plots"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Process each prediction in the CSV file
    for idx, row in df.iterrows():
        print(f"\nProcessing prediction {idx + 1}/{len(df)}")
        
        # Get the 64D vector and reshape to 8x8
        try:
            vector = row.values.astype(float)
            if len(vector) != 64:
                print(f"Skipping row {idx} - expected 64 values, got {len(vector)}")
                continue
                
            matrix = vector.reshape((8, 8))
            
            # Threshold to convert to binary (0 or 1) - you can adjust this threshold
            matrix = np.where(matrix > 0.5, 1, 0)
            
            # Run simulation
            actual_te, freq_array, S = calculate_pcr(matrix, inputparameters)
            
            if freq_array is None or len(freq_array) <= 1:
                print(f"Skipping plot for prediction {idx + 1} due to invalid frequency data")
                continue
                
            # Calculate desired response
            desired_te = calculate_s21_te(freq_array)
            
            # Calculate MSE
            mse = calculate_mse(actual_te, desired_te)
            print(f"Prediction {idx + 1} - MSE: {mse:.6f}")
            
            # Create plot
            plt.figure(figsize=(14, 6))
            
            # Plot 1: TE Response
            plt.subplot(1, 2, 1)
            plt.plot(freq_array, actual_te, label='Actual TE', color='b')
            plt.plot(freq_array, desired_te, label='Desired TE', color='r', linestyle='--')
            plt.title(f'TE Response (Prediction {idx + 1})')
            plt.xlabel('Frequency (GHz)')
            plt.ylabel('TE Magnitude')
            plt.legend()
            plt.grid(True)
            plt.ylim(-0.1, 1.1)
            plt.text(0.05, 0.95, f'MSE: {mse:.6f}', 
                    transform=plt.gca().transAxes, 
                    fontsize=10, verticalalignment='top',
                    bbox=dict(boxstyle='round,pad=0.5', fc='wheat', alpha=0.5))
            
            # Plot 2: Pixel Configuration
            plt.subplot(1, 2, 2)
            plt.imshow(matrix, cmap='binary', interpolation='none')
            plt.title('Pixel Configuration')
            plt.colorbar(label='Pixel State (0 or 1)')
            
            # Save the plot
            plot_filename = f"prediction_{idx + 1:03d}.png"
            save_path = os.path.join(output_dir, plot_filename)
            plt.tight_layout()
            plt.savefig(save_path)
            plt.close()
            
            print(f"Saved plot to: {save_path}")
            
        except Exception as e:
            print(f"Error processing prediction {idx + 1}: {str(e)}")
            continue

    print("\nProcessing complete!")
